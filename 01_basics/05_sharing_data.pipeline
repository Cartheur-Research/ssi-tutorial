<?xml version="1.0" ?>

<pipeline ssi-v="1">

	<register>
		<load name="mouse"/>
		<load name="graphic"/>		
		<load name="ioput"/>				
		<load name="control"/>			
		<load name="signal"/>		
	</register>

	<!-- # Cast stream
	
	For the following example, we have to cast the button stream from integers to float. We do it in-place using the `Cast` component.
	
	-->
	<sensor create="Mouse" mask="1" event="true" address="click@mouse">
		<output channel="button" pin="button">
			<transformer create="Cast" type="9"/>
		</output>
		<output channel="cursor" pin="cursor"/>
	</sensor>
	<!---->
	
	<!-- # Functionals
	
	In addition, we add a `FunctionalsEventSender`, which calculates some statistics over the cursor stream and creates a new event `features@mouse`.
	
	-->
	<consumer create="FunctionalsEventSender" names="mean,min,max" address="features@mouse">
		<input pin="cursor" address="click@mouse"/>
	</consumer>	
	<!---->
		
	<!-- # XML templates
	
	The component `XMLSender` offers a fairly flexible way to share data with other applications. It takes as input a template (following an XML structure), which is then filled at run-time with input from the pipeline. Therefore, variables in the form `$(0)` and `$(event@sender)` can be used, which at run- will be replaced with values from an input stream or data attached to an according event. Afterwards an event with the according XML string is fired. A couple of options are available to control what kind of information should be added. For an overview please refer to this [[document]](https://rawgit.com/hcmlab/ssi/master/docs/index.html#xml-advanced-network-xmlsender).
	-->	
	<consumer create="XMLEventSender:monitor" path="05_sharing_data" address="xml@mouse" monitor="true">
		<input pin="cursor;button" frame="5"/>
		<listen address="click,features@mouse"/>
	</consumer> 	
	<!---->
	
	<!-- # Socket sender
	
	Finally, we publish the xml string on a socket connection so that external applications can receive it. [[See also]](https://rawgit.com/hcmlab/ssi/master/docs/index.html#xml-advanced-network-sharing)
	
	Note that instead of hard-coding the url, we are using a variable `$(url)`. Variables are a useful tool to keep options in a separate configuration files. A configuration file includes statements of the form `<key> = <value>`. If it has the same name as the pipeline (ending on `.pipeline-config`), it is automatically applied. Otherwise, it has to be explicatively passed as an argument to `xmlpipe.exe`. [[See also]](https://rawgit.com/hcmlab/ssi/master/docs/index.html#variables) 
	-->
	<object create="SocketEventWriter" url="$(url)">
		<listen address="xml@mouse"/>
	</object>    
	<!---->
	
	<consumer create="SignalPainter:plot" title="CURSOR;BUTTON" size="10">
		<input pin="cursor;button" frame="0.1s"/>     
	</consumer>  	
			
	<object create="Decorator" icon="true" title="Pipeline">
		<area pos="0,0,400,600">console</area>
		<area pos="400,0,400,300">plot</area>
		<area pos="400,300,400,300">monitor</area>
	</object>
	
</pipeline>

