<?xml version="1.0" ?>

<pipeline ssi-v="1">

	<register>
		<load name="mouse"/>
		<load name="graphic"/>		
		<load name="ioput"/>				
		<load name="control"/>			
		<load name="signal"/>		
	</register>

	<!-- # Fire an event
	
	Events represent information that is not generated in a continuous manner. For instance, we can tell our Mouse component to send an event each time the left mouse button is pressed or released by setting the option `event="true"`. We also assign an address, which we later use to refer to the event (here `click@mouse`). [[See also]](https://rawgit.com/hcmlab/ssi/master/docs/index.html#xml-basics-events)
	-->
	<sensor create="Mouse" mask="1" event="true" address="click@mouse">
		<output channel="button" pin="button"/>
		<output channel="cursor" pin="cursor"/>
	</sensor>
	<!---->
		
	<!-- # Event-based processing
	
	Since consumer (other than transformer) do not have an output stream, it is possible to trigger them by events. In that case, a consumer only receives input when an event was fired. To do so, we replace the frame attribute with the address of the according event. When an event with a matching address is fired, the painter will receive a stream, which corresponds to the time slot represented by the event (defined by a start time and a duration in milliseconds). Note that in contrast to previous examples we have removed the size option since now we want to display the received stream in its full length. [[See also]](https://rawgit.com/hcmlab/ssi/master/docs/index.html#xml-basics-events)		
	-->	
	<consumer create="SignalPainter:plot" title="CURSOR">
		<input pin="cursor" address="click@mouse" state="completed"/>     
	</consumer>  	
	<!---->
	
	<!-- # Events with data
		
	Events may hold data. For instance, the component `StringEventSender` converts an input stream to a string and attaches it to a new event. Likewise, `TupleEventSender` fires an event, but attaches float values. Finally, `MapEventSender` assigns an identifier (key) to each dimension. [[See also]](https://rawgit.com/hcmlab/ssi/master/docs/index.html#xml-basics-events)
	-->	
	<consumer create="StringEventSender" address="mean@string">
		<input pin="cursor" address="click@mouse"/>
	</consumer>
	<consumer create="TupleEventSender" address="mean@tuple">
		<input pin="cursor" address="click@mouse"/>
	</consumer>	
	<consumer create="MapEventSender" keys="x,y" address="mean@map">
		<input pin="cursor" address="click@mouse"/>
	</consumer>
	<!---->
	
	<!-- # Monitor events
		
	To monitor when events are created, the component `EventMonitor` displays a list of events within a certain time span. [[See also]](https://rawgit.com/hcmlab/ssi/master/docs/index.html#xml-basics-events)
	-->	
	<object create="EventMonitor:monitor" title="EVENTS">
		<listen address="@" span="10.0s"/>     
	</object>
	<!---->	
		
	<object create="Decorator" icon="true" title="Pipeline">
		<area pos="0,0,400,600">console</area>
		<area pos="400,0,400,300">plot</area>
		<area pos="400,300,400,300">monitor</area>
	</object>
	
</pipeline>

