<?xml version="1.0" ?>

<pipeline ssi-v="1">

	<!-- # Load additional components
	
	We load another plug-in `signal` to get access to basic signal processing algorithms. Check out the [API](file:///F:/openssi/docs/api/index.html) to see which are those additional components. [[See also]](https://rawgit.com/hcmlab/ssi/master/docs/index.html#xml-basics-component)
	-->
	<register>
		<load name="mouse"/>
		<load name="graphic"/>		
		<load name="ioput"/>				
		<load name="control"/>			
		<load name="signal"/>		
	</register>
	<!---->

	<sensor create="Mouse" mask="1">
		<output channel="button" pin="button"/>
		<output channel="cursor" pin="cursor"/>
	</sensor>
	
	<!-- # Feature and filter
	
	A transformer takes as input one or more streams and outputs a new stream. With few exceptions, most transformers are either feature (i.e. reduce the input to a a single sample) or filter (i.e. sample rate remains unchanged). In the following, we calculate the energy of the cursor across both dimensions (therefore we set `global="true"`). We use `delta="0.4s"` to enlarge the processing window from 0.1 to 0.5 seconds. Since `energy` is a feature, the content of the window will be reduced to a single value, i.e. the output stream has a sample rate of 2 Hz. We also calculate the moving average of the signal. Since `MvgAvgVar` is a filter, the number of input samples equals the number of output samples (here `5`). [[See also]](https://rawgit.com/hcmlab/ssi/master/docs/index.html#xml-basics-transformer)

	-->
	<transformer create="Energy" global="true">
		<input pin="cursor" frame="0.1s" delta="0.4s"/>
		<output pin="energy"/>
	</transformer>	
	<transformer create="MvgAvgVar:average" win="1.0" format="1">
		<input pin="cursor" frame="5"/>
		<output pin="average"/>
	</transformer>  
	<!---->
	
	<!-- # Change options at run-time
	
	Some options can be changed at run-time. In the [API](file:///F:/openssi/docs/api/index.html) these are marked with the keyword `FREE`.
	
	![](https://raw.githubusercontent.com/hcmlab/ssi/master/docs/pics/xml-advanced-control-0.png)
	
	To demonstrate their use, we add a limiter and control the minimum and maximum with two sliders. Note that we explicitly set the name of the option that should be controlled by the sliders. [[See also]](https://rawgit.com/hcmlab/ssi/master/docs/index.html#xml-advanced-control)
	
	-->
	<runnable create="ControlSlider:slider" id="limits" name="min" defval="0.0" minval="0.0" maxval="0.5"/>
	<runnable create="ControlSlider:slider" id="limits" name="max" defval="0.5" minval="0.5" maxval="1.0"/>
	<transformer create="Limits:limits" min="0.0" max="1.0">
		<input pin="cursor" frame="0.2s"/>			
		<output pin="limit"/>
	</transformer>
	<!---->
	
	<consumer create="SignalPainter:paint" title="CURSOR" size="10.0">
		<input pin="cursor" frame="0.2s"/>		
	</consumer>	
	<consumer create="SignalPainter:paint" title="ENERGY" size="10.0">
		<input pin="energy" frame="0.2s"/>		
	</consumer>	
	<consumer create="SignalPainter:paint" title="AVERAGE" size="10.0">
		<input pin="average" frame="0.2s"/>		
	</consumer>	
	
	<!-- # In-place transformation

	If we manipulate a stream on-the-fly we call it an in-place manipulation. In that case the result of the transformation is not published on a pin, but directly bound to a component. Only consumers and sensors support in-place manipulation, and in the latter case only filter components are allowed. For instance, to visualize the first dimension of a stream we can add a `Selector` and set `indices="0"`. [[See also]](https://rawgit.com/hcmlab/ssi/master/docs/index.html#xml-basics-transformer-inplace)		
	-->	
	<consumer create="SignalPainter:paint" title="LIMIT (X-axis only)" size="10.0">
		<input pin="limit" frame="0.2s">
			<transformer create="Selector" indices="0"/>
		</input>
	</consumer>		
	<!---->
		
	<object create="Decorator" icon="true" title="Pipeline">
		<area pos="0,0,400,400">console</area>
		<area pos="400,0,400,600">paint*</area>
		<area pos="0,400,400,200">slider*</area>
	</object>	
	
</pipeline>

